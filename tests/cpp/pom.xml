<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.javacc</groupId>
		<artifactId>tests</artifactId>
		<version>8.0.0</version>
	</parent>
	<name>JavaCC tests C++</name>
	<groupId>org.javacc.tests</groupId>
	<artifactId>cpp</artifactId>
	<packaging>pom</packaging>
	<properties>
		<native-maven-plugin>1.0-alpha-11</native-maven-plugin>
	</properties>
<!-- 		<module>JavaCCGrammar</module>  contains JAVACODE  -->
	<modules>
<!--
		<module>CORBA-IDL</module>
		<module>Interpreter</module>
		<module>MailProcessing</module>
		<module>JJTreeExamples</module>
 -->
 	</modules>
	<dependencies>
		<dependency>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>native-maven-plugin</artifactId>
			<version>${native-maven-plugin}</version>
		</dependency>
	</dependencies>
	<profiles>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<envFactoryName>org.codehaus.mojo.natives.msvc.Community2017x86EnvFactory</envFactoryName>
				<compilerProvider>msvc</compilerProvider>
				<linkerProvider>msvc</linkerProvider>
			</properties>
		</profile>
		<profile>
			<id>unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<compilerProvider>generic</compilerProvider>
				<linkerProvider>generic</linkerProvider>
			</properties>
		</profile>
	</profiles>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>javacc-maven-plugin</artifactId>
					<version>${javacc-maven-plugin}</version>
					<dependencies>
						<dependency>
							<groupId>org.javacc</groupId>
							<artifactId>parser</artifactId>
							<version>8.0.0</version>
						</dependency>
						<dependency>
							<groupId>org.javacc.codegen</groupId>
							<artifactId>java</artifactId>
							<version>8.0.0</version>
						</dependency>
						<dependency>
							<groupId>org.javacc.codegen</groupId>
							<artifactId>cpp</artifactId>
							<version>8.0.0</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<configuration>
								<codeGenerator>C++</codeGenerator>
							</configuration>
						</execution>
						
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>native-maven-plugin</artifactId>
					<version>${native-maven-plugin}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<inherited>false</inherited>
						<id>tests</id>
						<phase>test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<skip>true</skip>
							<target>
								<path id="javacc">
									<pathelement location="../../parser/target/parser-8.0.0.jar" />
									<pathelement location="../../codegen/cpp/target/cpp-8.0.0.jar" />
								</path>

								<!-- Place any ant task here. You can add anything you can add between <target> and </target> in a build.xml. -->
								<mkdir dir="test.tmp" />

								<echo />
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/CORBA-IDL" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/CORBA-IDL/IDL.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/CORBA-IDL" />
								<copy todir="test.tmp/CORBA-IDL/">
									<fileset dir="examples/CORBA-IDL">
										<include name="*.idl" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="IDLParser" classpath="test.tmp/CORBA-IDL/"
									outputproperty="test.corba.out">
									<arg line="test.tmp/CORBA-IDL/Hello.idl" />
								</java>
								<echo>${test.corba.out}</echo>
								<fail message="CORBA failed">
									<condition>
										<not>
											<contains string="${test.corba.out}" substring="IDL file parsed successfully" />
										</not>
									</condition>
								</fail>
								<echo />
								<copy todir="test.tmp/GUIParsing/ParserVersion">
									<fileset dir="examples/GUIParsing/ParserVersion">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/GUIParsing/ParserVersion" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/GUIParsing/ParserVersion/CalcInput.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/GUIParsing/ParserVersion" />
								<!-- 
								<echo />
								<copy todir="test.tmp/GUIParsing/TokenMgrVersion">
									<fileset dir="examples/GUIParsing/TokenMgrVersion">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg
										line="-OUTPUT_DIRECTORY=test.tmp/GUIParsing/TokenMgrVersion 
									examples/GUIParsing/TokenMgrVersion/CalcInput.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/GUIParsing/TokenMgrVersion" />
								 -->
								<echo />
								<copy todir="test.tmp/Interpreter">
									<fileset dir="examples/Interpreter">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Interpreter " />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Interpreter/SPL.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Interpreter " />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/Interpreter/SPL.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/Interpreter" />
								<copy todir="test.tmp/Interpreter/">
									<fileset dir="examples/Interpreter/">
										<include name="*.spl" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="SPL" classpath="test.tmp/Interpreter/" inputstring="3"
									outputproperty="spl.out1">
									<arg line="test.tmp/Interpreter/fact.spl" />
								</java>
								<echo>${spl.out1}</echo>
								<fail message="SPL fact parse failed">
									<condition>
										<not>
											<contains string="${spl.out1}" substring="Value of fact : 6" />
										</not>
									</condition>
								</fail>
								<java failonerror="true" fork="true" classname="SPL" classpath="test.tmp/Interpreter/" inputstring="3"
									outputproperty="spl.out2">
									<arg line="test.tmp/Interpreter/odd.spl" />
								</java>
								<echo>${spl.out2}</echo>
								<fail message="SPL odd parse failed">
									<condition>
										<not>
											<contains string="${spl.out2}" substring="Value of odd : true" />
										</not>
									</condition>
								</fail>
								<java failonerror="true" fork="true" classname="SPL" classpath="test.tmp/Interpreter/" inputstring="9"
									outputproperty="spl.out3">
									<arg line="test.tmp/Interpreter/sqrt.spl" />
								</java>
								<echo>${spl.out3}</echo>
								<fail message="SPL sqrt parse failed">
									<condition>
										<not>
											<contains string="${spl.out3}" substring="Value of sqrt : 3" />
										</not>
									</condition>
								</fail>
								<echo />
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg1" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/JJTreeExamples/java/eg1.jjt" />
								</java>
								<java fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg1" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/JJTreeExamples.eg1/eg1.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/JJTreeExamples.eg1" />
								<java failonerror="true" fork="true" classname="Eg1" classpath="test.tmp/JJTreeExamples.eg1/"
									inputstring="(a + b) * (c + 1);" outputproperty="jjtree.eg1.out">
								</java>
								<echo>${jjtree.eg1.out}</echo>
								<fail message="JJTree eg1 parse failed">
									<condition>
										<not>
											<contains string="${jjtree.eg1.out}" substring="Thank you." />
										</not>
									</condition>
								</fail>
								<echo />
								<copy todir="test.tmp/JJTreeExamples.eg2">
									<fileset dir="examples/JJTreeExamples/java">
										<include name="*.java" />
										<exclude name="Eg4DumpVisitor.java" />
										<exclude name="ASTMyOtherID.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg2" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/JJTreeExamples/java/eg2.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg2" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/JJTreeExamples.eg2/eg2.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/JJTreeExamples.eg2" />
								<java failonerror="true" fork="true" classname="Eg2" classpath="test.tmp/JJTreeExamples.eg2/"
									inputstring="(a + b) * (c + 1);" outputproperty="jjtree.eg2.out">
								</java>
								<echo>${jjtree.eg2.out}</echo>
								<fail message="JJTree eg2 parse failed">
									<condition>
										<not>
											<contains string="${jjtree.eg2.out}" substring="Thank you." />
										</not>
									</condition>
								</fail>
								<echo />
								<copy todir="test.tmp/JJTreeExamples.eg3">
									<fileset dir="examples/JJTreeExamples/java">
										<include name="*.java" />
										<exclude name="Eg4DumpVisitor.java" />
										<exclude name="ASTMyOtherID.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg3" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/JJTreeExamples/java/eg3.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg3" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/JJTreeExamples.eg3/eg3.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/JJTreeExamples.eg3" />
								<java failonerror="true" fork="true" classname="Eg3" classpath="test.tmp/JJTreeExamples.eg3/"
									inputstring="(a + b) * (c + 1);" outputproperty="jjtree.eg3.out">
								</java>
								<echo>${jjtree.eg3.out}</echo>
								<fail message="JJTree eg3 parse failed">
									<condition>
										<not>
											<contains string="${jjtree.eg3.out}" substring="Thank you." />
										</not>
									</condition>
								</fail>
								<echo />
								<copy todir="test.tmp/JJTreeExamples.eg4">
									<fileset dir="examples/JJTreeExamples/java">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg4" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/JJTreeExamples/java/eg4.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JJTreeExamples.eg4" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/JJTreeExamples.eg4/eg4.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/JJTreeExamples.eg4" />
								<java failonerror="true" fork="true" classname="Eg4" classpath="test.tmp/JJTreeExamples.eg4/"
									inputstring="(a + b) * (c + 1);" outputproperty="jjtree.eg4.out">
								</java>
								<echo>${jjtree.eg4.out}</echo>
								<fail message="JJTree eg4 parse failed">
									<condition>
										<not>
											<contains string="${jjtree.eg4.out}" substring="Thank you." />
										</not>
									</condition>
								</fail>
								<echo />

								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/JavaCCGrammar" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/JavaCCGrammar/JavaCC.jj" />
								</java>

								<javac fork="true" srcdir="test.tmp/JavaCCGrammar" />
								<!-- TODO, test cases for JavaGrammars -->
								<echo />
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg1" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example1.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg2" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example2.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg3" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example3.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg4" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example4.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg5" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example5.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg6" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example6.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg7" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example7.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg8" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example8.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg9" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example9.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Lookahead.eg10" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Lookahead/Example10.jj" />
								</java>
								<echo />
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/MailProcessing" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/MailProcessing/Digest.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/MailProcessing" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/MailProcessing/Faq.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/MailProcessing" />
								<echo />
								<copy todir="test.tmp/Obfuscator">
									<fileset dir="examples/Obfuscator">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Obfuscator" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Obfuscator/Java1.1.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Obfuscator" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Obfuscator/IdsFile.jj" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Obfuscator" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Obfuscator/MapFile.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/Obfuscator" />
								<!-- TODO, test cases for SimpleExamples -->
								<echo />
								<copy todir="test.tmp/Transformer">
									<fileset dir="examples/Transformer">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Transformer" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/Transformer/ToyJava.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/Transformer" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/Transformer/ToyJava.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/Transformer" />
								<echo />
								<copy todir="test.tmp/VTransformer">
									<fileset dir="examples/VTransformer">
										<include name="*.java" />
									</fileset>
								</copy>
								<java failonerror="true" fork="true" classname="jjtree" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/VTransformer" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="../examples/VTransformer/Java1.1.jjt" />
								</java>
								<java failonerror="true" fork="true" classname="javacc" classpathref="javacc">
									<arg line="-OUTPUT_DIRECTORY=test.tmp/VTransformer" />
									<arg line="-CODE_GENERATOR=C++" />
									<arg line="test.tmp/VTransformer/Java1.1.jj" />
								</java>
								<javac fork="true" srcdir="test.tmp/VTransformer" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>