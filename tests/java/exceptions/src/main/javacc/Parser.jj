/*
** Copyright (c) 2007, Paul Cager
** All rights reserved.
** 
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
** 
**    * Redistributions of source code must retain the above copyright notice,
**      this list of conditions and the following disclaimer.
**    * Redistributions in binary form must reproduce the above copyright
**      notice, this list of conditions and the following disclaimer in the
**      documentation and/or other materials provided with the distribution.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
** THE POSSIBILITY OF SUCH DAMAGE.
*/

options {
	STATIC=false;
}

PARSER_BEGIN(Parser)

import java.util.Map;
import java.util.HashMap;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintStream;

public class Parser {

  public static void main(String args[])  throws FileNotFoundException {
    InputStream input = System.in;
    PrintStream output = System.out;
    PrintStream error = System.err;
    InputStream prevInput = null;
    PrintStream prevOutput = null;
    PrintStream prevError = null;
    if (args.length == 3) {
    	prevInput = input;   	input = new FileInputStream(args[0]);
    	prevOutput = output;   	output = new PrintStream(args[1]);
    	prevError = error;   	error  = new PrintStream(args[2]);
       System.setIn(input);
       System.setOut(output);
       System.setErr(error);
    }
   try {
    	Parser t = new Parser(input);
    	t.CompilationUnit();
    	output.println("Parser ran sucessfully");
    } catch (Exception e) {
      error.println("Oops.");
      error.println(e.getMessage());
 	  e.printStackTrace(error);
   } finally {
        if (prevInput != null)  System.setIn(prevInput);
        if (prevOutput != null) System.setOut(prevOutput);
        if (prevError != null)  System.setErr(prevError);
    }
  }
}

PARSER_END(Parser)

TOKEN_MGR_DECLS : {
 Map map = new HashMap();
}

TOKEN :
{
  < A: "A">
| < B: "B">
| < C: "C">
| < D: "D">
| < E: "E">
}

Map CompilationUnit() :
{
	Map map;
}
{
	"A" { map = new HashMap(); }
	"B"
	[ "E" { throw new ParseException("help"); } ]
	"C"
	<EOF> { return map; }
}
